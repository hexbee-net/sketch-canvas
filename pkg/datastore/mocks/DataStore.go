// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	canvas "github.com/hexbee-net/sketch-canvas/pkg/canvas"

	mock "github.com/stretchr/testify/mock"
)

// DataStore is an autogenerated mock type for the DataStore type
type DataStore struct {
	mock.Mock
}

// DeleteDocument provides a mock function with given fields: key, ctx
func (_m *DataStore) DeleteDocument(key string, ctx context.Context) error {
	ret := _m.Called(key, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, context.Context) error); ok {
		r0 = rf(key, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDocList provides a mock function with given fields: cursor, count, ctx
func (_m *DataStore) GetDocList(cursor uint64, count int64, ctx context.Context) ([]string, uint64, error) {
	ret := _m.Called(cursor, count, ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(uint64, int64, context.Context) []string); ok {
		r0 = rf(cursor, count, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(uint64, int64, context.Context) uint64); ok {
		r1 = rf(cursor, count, ctx)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint64, int64, context.Context) error); ok {
		r2 = rf(cursor, count, ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDocument provides a mock function with given fields: key, ctx
func (_m *DataStore) GetDocument(key string, ctx context.Context) (*canvas.Canvas, error) {
	ret := _m.Called(key, ctx)

	var r0 *canvas.Canvas
	if rf, ok := ret.Get(0).(func(string, context.Context) *canvas.Canvas); ok {
		r0 = rf(key, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*canvas.Canvas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(key, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSize provides a mock function with given fields: ctx
func (_m *DataStore) GetSize(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDocument provides a mock function with given fields: key, doc, ctx
func (_m *DataStore) SetDocument(key string, doc *canvas.Canvas, ctx context.Context) error {
	ret := _m.Called(key, doc, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *canvas.Canvas, context.Context) error); ok {
		r0 = rf(key, doc, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
